from aiogram.filters import CommandObject, CommandStart, StateFilter
from aiogram.types import Message
from aiogram.dispatcher.router import Router
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram import F

from loguru import logger
import aiohttp
import json

from bot.database import connection
from bot.admin.keyboards.inline_kb import verified_user
from bot.users.keyboards.markup_kb import main_keyboard, del_kbd
from bot.users.models import User
from bot.users.dao import UserDAO
from bot.users.schemas import TelegramIDModel, UserModel
from bot.utils import imei_validator

from app.config import admins, settings
from app.auth import create_jwt_token

user_router = Router()


class ImeiState(StatesGroup):
    Imei = State()


@user_router.message(CommandStart())
@connection()
async def cmd_start(message: Message, command: CommandObject, session, **kwargs):
    try:
        user_id = message.from_user.id
        user_info = await UserDAO.find_one_or_none(
            session=session, filters=TelegramIDModel(telegram_id=user_id)
        )

        if user_info:
            match user_info.verification_code:
                case User.VerificationCode.NotVerified:
                    msg = "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –µ—â–µ –Ω–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω. –û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç."
                    await message.answer(msg)
                    return
                case User.VerificationCode.Verified:
                    msg = "–ú—ã —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º."
                    await message.answer(
                        msg, reply_markup=main_keyboard(user_info.role)
                    )
                    return
                case User.VerificationCode.Blocked:
                    admin_link_msg = ""
                    admins_list: list[User] = await UserDAO.get_admins(session)
                    for admin in admins_list:
                        admin_link_msg = (
                            f"@{admin.username}\n"
                            if admin.username
                            else f'<a href="tg://user?id={admin.telegram_id}">–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</a>\n'
                        )
                    msg = (
                        "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –æ–±–∂–∞–ª–æ–±–∏—Ç—å —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏:\n"
                        + admin_link_msg
                    )
                    await message.answer(msg)
                    return

        if user_id in admins:
            values = UserModel(
                telegram_id=user_id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name,
                verification_code=User.VerificationCode.Verified,
                role=User.Role.Admin,
            )
            await UserDAO.add(session=session, values=values)
            await message.answer(
                "–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏", reply_markup=main_keyboard(User.Role.Admin)
            )
            return
        values = UserModel(
            telegram_id=user_id,
            username=message.from_user.username,
            first_name=message.from_user.first_name,
            last_name=message.from_user.last_name,
            verification_code=User.VerificationCode.NotVerified,
            role=User.Role.User,
        )
        await UserDAO.add(session=session, values=values)
        for admin_id in admins:
            try:
                user_info = f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: {user_id}\n–ò–º—è: {message.from_user.full_name}"
                await message.bot.send_message(
                    admin_id, user_info, reply_markup=verified_user(user_id)
                )
            except Exception as e:
                logger.error(f"{e}")
        msg = f"–û–∂–∏–¥–∞–π—Ç–µ, –ø–æ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç."
        await message.answer(msg)

    except Exception as e:
        logger.error(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã /start –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}"
        )
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )


@user_router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å IMEI")
async def cmd_imei(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ imei", reply_markup=del_kbd)
    await state.set_state(ImeiState.Imei)


IMEI_PATTERN = r"^\d{15}$"


@user_router.message(F.text.regexp(IMEI_PATTERN), StateFilter(ImeiState.Imei))
@connection()
async def is_imei(message: Message, state: FSMContext, session, **kwargs):
    try:
        imei_number = message.text.strip()
        user: User = await UserDAO.find_by_telegram_id(
            session, int(message.from_user.id)
        )
        if not imei_validator(imei_number):
            await message.answer(
                "üö® –û—à–∏–±–∫–∞: –í–≤–µ–¥–µ–Ω–Ω—ã–π IMEI –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω!\n",
                reply_markup=main_keyboard(user.role),
            )
            await state.clear()
            return
        imei_protected_url = f"{settings.BASE_SITE}/api/check-imei"
        token = create_jwt_token()

        async with aiohttp.ClientSession() as session:
            async with session.post(
                imei_protected_url,
                params={"deviceId": imei_number},
                headers={"Authorization": f"Bearer {token}"},
            ) as imeo_api_response:
                if imeo_api_response.status != 201:
                    error_text = await imeo_api_response.text()
                    await message.answer(
                        f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {error_text}",
                        reply_markup=main_keyboard(user.role),
                    )
                    await state.clear()
                    return

                imei_data = await imeo_api_response.json()
                logger.info(f"API Response: {imei_data}")
                device_name = imei_data["properties"].get("deviceName", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                model_desc = imei_data["properties"].get("modelDesc", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                purchase_country = imei_data["properties"].get(
                    "purchaseCountry", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                )
                network_status = imei_data["properties"].get("network", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                warranty_status = imei_data["properties"].get(
                    "warrantyStatus", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
                )
                refurbished = (
                    "‚úÖ –î–∞" if imei_data["properties"].get("refurbished") else "‚ùå –ù–µ—Ç"
                )
                fmi_on = (
                    "‚úÖ –í–∫–ª—é—á–µ–Ω"
                    if imei_data["properties"].get("fmiOn")
                    else "‚ùå –û—Ç–∫–ª—é—á–µ–Ω"
                )
                lost_mode = (
                    "‚úÖ –î–∞" if imei_data["properties"].get("lostMode") else "‚ùå –ù–µ—Ç"
                )
                sim_lock = (
                    "‚úÖ –ï—Å—Ç—å" if imei_data["properties"].get("simLock") else "‚ùå –ù–µ—Ç"
                )

                message_text = (
                    f"üì± **–î–∞–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:**\n"
                    f"üîπ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {device_name}\n"
                    f"üîπ **–ú–æ–¥–µ–ª—å:** {model_desc}\n"
                    f"üåç **–°—Ç—Ä–∞–Ω–∞ –ø–æ–∫—É–ø–∫–∏:** {purchase_country}\n"
                    f"üîó **–°—Ç–∞—Ç—É—Å —Å–µ—Ç–∏:** {network_status}\n"
                    f"üõ° **–ì–∞—Ä–∞–Ω—Ç–∏—è:** {warranty_status}\n"
                    f"‚ôª **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π:** {refurbished}\n"
                    f"üîí **iCloud (FMI):** {fmi_on}\n"
                    f"üö® **–†–µ–∂–∏–º –ø–æ—Ç–µ—Ä–∏:** {lost_mode}\n"
                    f"üì∂ **SIM-–ª–æ–∫:** {sim_lock}\n"
                )
                await message.answer(
                    message_text, reply_markup=main_keyboard(user.role)
                )
    except Exception as e:
        await message.answer(
            f"üö® –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}",
            reply_markup=main_keyboard(user.role),
        )
        await state.clear()


@user_router.message(~F.text.regexp(IMEI_PATTERN), StateFilter(ImeiState.Imei))
@connection()
async def is_not_imei(message: Message, state: FSMContext, session, **kwargs):
    user: User = await UserDAO.find_by_telegram_id(session, int(message.from_user.id))
    await message.answer(
        "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ Imei, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞", reply_markup=main_keyboard(user.role)
    )
    await state.clear()
