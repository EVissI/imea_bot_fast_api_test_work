from aiogram.filters import CommandObject, Command
from aiogram.filters.callback_data import CallbackData
from aiogram import F
from loguru import logger

from aiogram.types import Message, CallbackQuery
from aiogram.dispatcher.router import Router
from bot.database import connection
from bot.users.models import User
from bot.users.dao import UserDAO
from bot.users.keyboards.markup_kb import main_keyboard
from bot.utils import update_user_ver_status, is_valid_telegram_id,split_message

TELEGRAM_ID_PATTERN = r"^[1-9]\d{6,9}$"
admin_router = Router()


class AdminCallback(CallbackData, prefix="admin"):
    action: str
    user_id: int = None


@admin_router.message(Command("unban"))
@connection()
async def cmd_unban_user(message: Message, command: CommandObject, session, **kwargs):
    try:
        user_id: str = command.args
        if not user_id:
            await message.answer(
                "–ü–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã /unban —è –æ–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ"
            )
        elif not is_valid_telegram_id(user_id):
            await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            user: User = await UserDAO.find_by_telegram_id(session, int(user_id))
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            await update_user_ver_status(
                session=session,
                telegram_id=user_id,
                ver_status=User.VerificationCode.Verified,
            )
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await message.bot.send_message(
                user_id,
                f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º –≤–∞—Å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏!! –í—ã –º–æ–∂–µ—Ç–µ —Å–≤–æ–±–æ–¥–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º",
                reply_markup=main_keyboard(user.role),
            )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã /unban - {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã /unban - {e}")

@admin_router.message(Command("ban"))
@connection()
async def cmd_unban_user(message: Message, command: CommandObject, session, **kwargs):
    try:
        user_id: str = command.args
        if not user_id:
            await message.answer(
                "–ü–æ—Å–ª–µ –∫–æ–º–º–∞–Ω–¥—ã /ban —è –æ–∂–∏–¥–∞—é –ø–æ–ª—É—á–∏—Ç—å id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ"
            )
        elif not is_valid_telegram_id(user_id):
            await message.answer("–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞")
        else:
            user: User = await UserDAO.find_by_telegram_id(session, int(user_id))
            if not user:
                await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            await update_user_ver_status(
                session=session,
                telegram_id=user_id,
                ver_status=User.VerificationCode.Blocked,
            )
            await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            await message.bot.send_message(
                user_id,
                f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∞ –≤–∞—Å",
            )
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã /ban - {e}")
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–º–∞–Ω–¥—ã /ban - {e}")


@admin_router.message(F.text == "–°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö —é–∑–µ—Ä–æ–≤")
@connection()
async def get_banned_user_list(message: Message, session, **kwargs):
    try:
        banned_users: list[User] = await UserDAO.get_banned_users(session)

        if not banned_users:
            await message.answer("–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        msg = "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for user in banned_users:
            username = f"@{user.username}" if user.username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            msg += f"üë§ {username} (ID: {user.telegram_id})\n"
        answer = split_message(msg=msg, with_photo=False)
        for i in answer:
            await message.answer(i)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —é–∑–µ—Ä–æ–≤ - {e}")

@admin_router.message(F.text == "–°–ø–∏—Å–æ–∫ —é–∑–µ—Ä–æ–≤")
@connection()
async def get_banned_user_list(message: Message, session, **kwargs):
    try:
        users: list[User] = await UserDAO.get_all_users(session)

        if not users:
            await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
            return

        msg = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n"
        for user in users:
            username = f"@{user.username}" if user.username else "–ë–µ–∑ –∏–º–µ–Ω–∏"
            msg += f"üë§ {username} (ID: {user.telegram_id} Role: {user.role.value} Status:{user.verification_code.value})\n"
        answer = split_message(msg=msg, with_photo=False)
        for i in answer:
            await message.answer(i)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —é–∑–µ—Ä–æ–≤ - {e}")

@admin_router.callback_query(AdminCallback.filter())
@connection()
async def admin_callback(
    query: CallbackQuery, callback_data: AdminCallback, session, **kwargs
):
    user_id = callback_data.user_id
    logger.debug(f"Callback data: {callback_data}")
    try:
        if callback_data.action == "verified_user_yes":
            user:User = await UserDAO.find_by_telegram_id(session,int(user_id))
            await update_user_ver_status(
                session=session,
                telegram_id=user_id,
                ver_status=User.VerificationCode.Verified,
            )
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            await query.message.delete()
            await query.bot.send_message(
                user_id,
                "–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω, –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º",
                reply_markup=main_keyboard(user.role),
            )
            return
        if callback_data.action == "verified_user_no":

            await update_user_ver_status(
                session=session,
                telegram_id=user_id,
                ver_status=User.VerificationCode.Blocked,
            )
            await query.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω")
            await query.message.delete()
            await query.bot.send_message(
                user_id,
                "–°–æ–∂–∞–ª–µ—é, –Ω–æ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω. –î–∞–ª—å–Ω–µ–π—à–µ–µ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –±–æ—Ç–æ–º –Ω–µ –≤–æ–∑–º–æ–∂–Ω–æ",
            )
            return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ callback {callback_data.action}: {e}")
        await query.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ."
        )
